import os, pandas as pd, numpy as np, json, matplotlib.pyplot as plt, argparse


from utils.hand.api import ffmpeg4format, mp_kpts_generator, mp_kpts_preprocessing, hand_pos_inference, model_pred_severity
from utils.hand.api import hand_parameters
from utils.seed import set_seed
from utils.hand.keypoints import stft_plot, mergePlot_PeakInteRaw

def main_batch(cfg):
    pass


def main_single(cfg):
    # config
    filename = cfg['filename'] # no extension, name only
    ext = cfg['ext']
    input_root_path = cfg['input_root_path']
    output_root_path = cfg['output_root_path']
    hand_LR = cfg['hand_LR']

    video_path = f"{input_root_path}/{filename}.{ext}"
    assert os.path.exists(video_path), "Please check your video path."

    # Step 0
    try:
        video_output_path = f'{output_root_path}/{filename}.mp4'
        ffmpeg4format(video_path=video_path, output_path=video_output_path)
    except Exception as e:
        print(e, "\n")
        print(filename)

    # Step 1: mediapipe keypoint generation
    mp_kpts_generator(
        video_path=video_output_path, 
        output_root_path=output_root_path,
        hand_query=hand_LR, export_video=True, logging=False
    )

    # Step 2: data preprocessing
    df_map_list = []
    try:
        try:
            csv_input_path = f"{output_root_path}/{filename}_mp_hand_kpt.csv"
            csv_output_path = f"{output_root_path}/{filename}_mp_hand_kpt_processed.csv"
            error_frame_ratio = mp_kpts_preprocessing(csv_input_path, csv_output_path, logging=False)

        except:
            csv_input_path = f"{output_root_path}/{filename}_mp_hand_kpt.thres0.csv"
            csv_output_path = f"{output_root_path}/{filename}_mp_hand_kpt_processed.thres0.csv"
            error_frame_ratio = mp_kpts_preprocessing(csv_input_path, csv_output_path, logging=False)

    except:
        print(e, "\n")
        print("Not predictable due to no keypoint extracted.")
        error_frame_ratio = 1

    df_map_list.append([csv_output_path.split("/")[-1], int(0), error_frame_ratio])
    df_map = pd.DataFrame(df_map_list)
    df_map.to_csv(f"{output_root_path}/{filename}_map.csv", index=None, header=None)

    # Step 3: prediction
    df_predict = model_pred_severity(
        test_data_path=output_root_path,
        test_map_path=f"{output_root_path}/{filename}_map.csv",
        hand=hand_LR,
        random_rotat_3d=True,
        seed=42
    )
    df_predict.drop(["label"], inplace =True, axis=1)
    df_predict.to_csv(f"{output_root_path}/{filename}_UPDRS_prediction.csv", index=None)

    # Step 4: clean uneccasary files
    os.remove(f"{output_root_path}/{filename}_map.csv")

    # Step 5: traditional parameters
    results = {}
    csv_input_path = f'{csv_output_path}' # csv_output => generated by deep learning script
    json_output_path = f'{csv_output_path.replace(".csv", "")}_handparams.json'
    data_input = pd.read_csv(csv_input_path)

    try:
        results = hand_parameters(data_input=data_input)
        with open(json_output_path, "w") as ff:
            json.dump(results, ff, indent=2)

    except Exception as e:
        print(e, "\n")
        print(filename)
    
    return None

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    # basic setting
    parser.add_argument('--seed',
                        type=int,
                        default=42,
                        help='seed for the splitting')

    # data
    parser.add_argument('--filename',
                        type=str,
                        default="sample_video",
                        help='the name of the video')
    parser.add_argument('--ext', 
                        type=str,
                        default='mp4',
                        help='the extension of the file')
    parser.add_argument('--hand_LR',
                        type=str,
                        default="Right",
                        choices=["Right", "Left"],
                        help="Which hand to transform: [Left or Right]")
    parser.add_argument('--input_root_path',
                        type=str,
                        default="./Data/InnerDataset/mp4",
                        help="the root path of the input")
    parser.add_argument('--output_root_path',
                        type=str,
                        default="./Data/sample_output",
                        help="the root path of the input")                    
    parser.add_argument('--mode',
                        type=str,
                        default="single",
                        choices=["single", "batch"], 
                        help="Single mode or batch mode to transform your data.")
    # other
    parser.add_argument('--logging',
                        action="store_true",
                        help='if logging or not')
    args = parser.parse_args()
    

    # Initialization: 
    cfg = args.__dict__ # args -> cfg
    set_seed(cfg['seed'])

    main_single(cfg)
